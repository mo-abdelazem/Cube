// prisma/schema.prisma - COMPLETE SCHEMA WITH ALL MODELS
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    CUSTOMER
    ADMIN
}

enum OrderStatus {
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
    REFUNDED
}

enum CouponType {
    PERCENTAGE
    FIXED_AMOUNT
    FREE_SHIPPING
}

enum RefundStatus {
    PENDING
    APPROVED
    PROCESSED
    REJECTED
}

model User {
    id               String            @id @default(cuid())
    email            String            @unique
    password         String
    firstName        String
    lastName         String
    phone            String?
    dateOfBirth      DateTime?
    language         String?           @default("en")
    currency         String?           @default("USD")
    role             UserRole          @default(CUSTOMER)
    isActive         Boolean           @default(true)
    orders           Order[]
    addresses        Address[]
    cartItems        CartItem[]
    wishlistItems    WishlistItem[]
    reviews          Review[]
    stockAdjustments StockAdjustment[]
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt

    @@map("users")
}

model Address {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    firstName String
    lastName  String
    address1  String
    address2  String?
    city      String
    state     String
    zipCode   String
    country   String
    phone     String?
    isDefault Boolean  @default(false)
    type      String? // 'home', 'work', 'other'
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("addresses")
}

model Category {
    id                String                @id @default(cuid())
    slug              String                @unique
    parentId          String?
    parent            Category?             @relation("CategoryHierarchy", fields: [parentId], references: [id])
    children          Category[]            @relation("CategoryHierarchy")
    products          Product[]
    translations      CategoryTranslation[]
    applicableCoupons Coupon[]              @relation("CouponCategories")
    createdAt         DateTime              @default(now())
    updatedAt         DateTime              @updatedAt

    @@map("categories")
}

model CategoryTranslation {
    id         String   @id @default(cuid())
    categoryId String
    category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    language   String
    name       String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([categoryId, language])
    @@map("category_translations")
}

model Product {
    id                String               @id @default(cuid())
    sku               String               @unique
    slug              String               @unique
    basePrice         Decimal              @db.Decimal(10, 2)
    isActive          Boolean              @default(true)
    isFeatured        Boolean              @default(false)
    hasVariants       Boolean              @default(false)
    averageRating     Float                @default(0)
    reviewCount       Int                  @default(0)
    categoryId        String
    category          Category             @relation(fields: [categoryId], references: [id])
    translations      ProductTranslation[]
    images            ProductImage[]
    variants          ProductVariant[]
    options           ProductOption[]
    orderItems        OrderItem[]
    cartItems         CartItem[]
    wishlistItems     WishlistItem[]
    reviews           Review[]
    applicableCoupons Coupon[]             @relation("CouponProducts")
    createdAt         DateTime             @default(now())
    updatedAt         DateTime             @updatedAt

    @@map("products")
}

model ProductTranslation {
    id          String   @id @default(cuid())
    productId   String
    product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    language    String
    name        String
    description String?
    shortDesc   String?
    metaTitle   String?
    metaDesc    String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@unique([productId, language])
    @@map("product_translations")
}

model ProductImage {
    id        String   @id @default(cuid())
    productId String
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    url       String
    alt       String?
    position  Int      @default(0)
    createdAt DateTime @default(now())

    @@map("product_images")
}

model Option {
    id           String              @id @default(cuid())
    name         String              @unique
    slug         String              @unique
    position     Int                 @default(0)
    translations OptionTranslation[]
    values       OptionValue[]
    products     ProductOption[]
    createdAt    DateTime            @default(now())
    updatedAt    DateTime            @updatedAt

    @@map("options")
}

model OptionTranslation {
    id        String   @id @default(cuid())
    optionId  String
    option    Option   @relation(fields: [optionId], references: [id], onDelete: Cascade)
    language  String
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([optionId, language])
    @@map("option_translations")
}

model OptionValue {
    id             String                   @id @default(cuid())
    optionId       String
    option         Option                   @relation(fields: [optionId], references: [id], onDelete: Cascade)
    value          String
    slug           String
    hexColor       String?
    position       Int                      @default(0)
    translations   OptionValueTranslation[]
    variantOptions ProductVariantOption[]
    createdAt      DateTime                 @default(now())
    updatedAt      DateTime                 @updatedAt

    @@unique([optionId, slug])
    @@map("option_values")
}

model OptionValueTranslation {
    id            String      @id @default(cuid())
    optionValueId String
    optionValue   OptionValue @relation(fields: [optionValueId], references: [id], onDelete: Cascade)
    language      String
    value         String
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt

    @@unique([optionValueId, language])
    @@map("option_value_translations")
}

model ProductOption {
    id        String   @id @default(cuid())
    productId String
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    optionId  String
    option    Option   @relation(fields: [optionId], references: [id], onDelete: Cascade)
    required  Boolean  @default(true)
    createdAt DateTime @default(now())

    @@unique([productId, optionId])
    @@map("product_options")
}

model ProductVariant {
    id               String                 @id @default(cuid())
    productId        String
    product          Product                @relation(fields: [productId], references: [id], onDelete: Cascade)
    sku              String                 @unique
    price            Decimal                @db.Decimal(10, 2)
    comparePrice     Decimal?               @db.Decimal(10, 2)
    stock            Int                    @default(0)
    isActive         Boolean                @default(true)
    isDefault        Boolean                @default(false)
    weight           Decimal?               @db.Decimal(8, 2)
    dimensions       Json?
    images           ProductVariantImage[]
    options          ProductVariantOption[]
    orderItems       OrderItem[]
    cartItems        CartItem[]
    stockAdjustments StockAdjustment[]
    reviews          Review[]
    createdAt        DateTime               @default(now())
    updatedAt        DateTime               @updatedAt

    @@map("product_variants")
}

model ProductVariantImage {
    id        String         @id @default(cuid())
    variantId String
    variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
    url       String
    alt       String?
    position  Int            @default(0)
    createdAt DateTime       @default(now())

    @@map("product_variant_images")
}

model ProductVariantOption {
    id            String         @id @default(cuid())
    variantId     String
    variant       ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
    optionValueId String
    optionValue   OptionValue    @relation(fields: [optionValueId], references: [id], onDelete: Cascade)
    createdAt     DateTime       @default(now())

    @@unique([variantId, optionValueId])
    @@map("product_variant_options")
}

model CartItem {
    id               String          @id @default(cuid())
    userId           String
    user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    productId        String
    product          Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
    productVariantId String?
    productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
    quantity         Int
    selectedOptions  Json?
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @updatedAt

    @@unique([userId, productId, productVariantId])
    @@map("cart_items")
}

model WishlistItem {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    productId String
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())

    @@unique([userId, productId])
    @@map("wishlist_items")
}

model Review {
    id               String          @id @default(cuid())
    userId           String
    user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    productId        String
    product          Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
    productVariantId String?
    productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: SetNull)
    rating           Int
    title            String?
    comment          String?
    isApproved       Boolean         @default(true)
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @updatedAt

    @@unique([userId, productId])
    @@map("reviews")
}

model Coupon {
    id                   String     @id @default(cuid())
    code                 String     @unique
    type                 CouponType
    value                Decimal    @db.Decimal(10, 2)
    minimumAmount        Decimal?   @db.Decimal(10, 2)
    maximumDiscount      Decimal?   @db.Decimal(10, 2)
    usageLimit           Int?
    usageLimitPerUser    Int?
    totalUsage           Int        @default(0)
    startDate            DateTime
    endDate              DateTime
    description          String?
    isActive             Boolean    @default(true)
    applicableProducts   Product[]  @relation("CouponProducts")
    applicableCategories Category[] @relation("CouponCategories")
    orders               Order[]    @relation("OrderCoupons")
    createdAt            DateTime   @default(now())
    updatedAt            DateTime   @updatedAt

    @@map("coupons")
}

model Order {
    id              String      @id @default(cuid())
    orderNumber     String      @unique
    userId          String?
    user            User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
    status          OrderStatus @default(PENDING)
    subtotal        Decimal     @db.Decimal(10, 2)
    tax             Decimal     @default(0) @db.Decimal(10, 2)
    shipping        Decimal     @default(0) @db.Decimal(10, 2)
    discount        Decimal     @default(0) @db.Decimal(10, 2)
    total           Decimal     @db.Decimal(10, 2)
    currency        String      @default("USD")
    items           OrderItem[]
    shippingAddress Json?
    billingAddress  Json?
    paymentId       String?
    paymentMethod   String?
    notes           String?
    appliedCoupons  Coupon[]    @relation("OrderCoupons")
    refunds         Refund[]
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    @@map("orders")
}

model OrderItem {
    id               String          @id @default(cuid())
    orderId          String
    order            Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
    productId        String
    product          Product         @relation(fields: [productId], references: [id])
    productVariantId String?
    productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
    quantity         Int
    price            Decimal         @db.Decimal(10, 2)
    total            Decimal         @db.Decimal(10, 2)
    selectedOptions  Json?
    createdAt        DateTime        @default(now())

    @@map("order_items")
}

model Refund {
    id          String       @id @default(cuid())
    orderId     String
    order       Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
    amount      Decimal      @db.Decimal(10, 2)
    reason      String?
    status      RefundStatus @default(PENDING)
    processedAt DateTime?
    notes       String?
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt

    @@map("refunds")
}

model StockAdjustment {
    id            String         @id @default(cuid())
    variantId     String
    variant       ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
    userId        String?
    user          User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
    previousStock Int
    newStock      Int
    adjustment    Int
    reason        String
    notes         String?
    createdAt     DateTime       @default(now())

    @@map("stock_adjustments")
}
